
jikkou {

  extension.providers {
    # By default, disable all extensions
    default.enabled: true
    # Explicitly enabled/disable extensions
    #<provider_name>.enabled: <boolean>
    schemaregistry.enabled = false
    kafka.enabled = true
    aiven.enabled = false
    kafkaconnect.enabled = true
  }

  # Configure Jikkou Proxy Mode
  # proxy {
  #  url = "http://localhost:8080"
  # }

  # Kafka Extension
  kafka {
    # The default Kafka Client configuration
    client {
      bootstrap.servers = "kafka:9092"
      bootstrap.servers = ${?JIKKOU_DEFAULT_KAFKA_BOOTSTRAP_SERVERS}
    #   security.protocol = "SSL"
    #   ssl.keystore.location = "/tmp/client.keystore.p12"
    #   ssl.keystore.password = "password"
    #   ssl.keystore.type = "PKCS12"
    #   ssl.truststore.location = "/tmp/client.truststore.jks"
    #   ssl.truststore.password = "password"
    #   ssl.key.password = "password"
    }
    brokers {
      # If 'True' 
      waitForEnabled = true
      waitForEnabled = ${?JIKKOU_KAFKA_BROKERS_WAIT_FOR_ENABLED}
      # The minimal number of brokers that should be alive for the CLI stops waiting.
      waitForMinAvailable = 1
      waitForMinAvailable = ${?JIKKOU_KAFKA_BROKERS_WAIT_FOR_MIN_AVAILABLE}
      # The amount of time to wait before verifying that brokers are available.
      waitForRetryBackoffMs = 1000
      waitForRetryBackoffMs = ${?JIKKOU_KAFKA_BROKERS_WAIT_FOR_RETRY_BACKOFF_MS}
      # Wait until brokers are available or this timeout is reached.
      waitForTimeoutMs = 60000
      waitForTimeoutMs = ${?JIKKOU_KAFKA_BROKERS_WAIT_FOR_TIMEOUT_MS}
    }
  }

  kafkaConnect {
    # Array of Kafka Connect clusters configurations.
    clusters = [
      {
        # Name of the cluster (e.g., dev, staging, production, etc.)
        name = "kafka-connect"
        # URL of the Kafka Connect service
        url = "http://kafka-connect:8083"
        # Method to use for authenticating on Kafka Connect. Available values are: [none, basicauth, ssl]
        authMethod = none
        # Use when 'authMethod' is 'basicauth' to specify the username for Authorization Basic header
        basicAuthUser = null
        # Use when 'authMethod' is 'basicauth' to specify the password for Authorization Basic header
        basicAuthPassword = null
        # Enable debug logging
        debugLoggingEnabled = false
  
        # # Ssl Config: Use when 'authMethod' is 'ssl'
        # # The location of the key store file.
        # sslKeyStoreLocation = "/certs/registry.keystore.jks"
        # # The file format of the key store file.
        # sslKeyStoreType = "JKS"
        # # The password for the key store file.
        # sslKeyStorePassword = "password"
        # # The password of the private key in the key store file.
        # sslKeyPassword = "password"
        # # The location of the trust store file.
        # sslTrustStoreLocation = "/certs/registry.truststore.jks"
        # # The file format of the trust store file.
        # sslTrustStoreType = "JKS"
        # # The password for the trust store file.
        # sslTrustStorePassword = "password"
        # # Specifies whether to ignore the hostname verification.
        # sslIgnoreHostnameVerification = true
      }
    ]
  }  

#   schemaRegistry {
#     # Comma-separated list of URLs for schema registry instances that can be used to register or look up schemas
#     url = "http://localhost:8081"
#     # The name of the schema registry implementation vendor - can be any value
#     vendor = generic
#     # Method to use for authenticating on Schema Registry. Available values are: [none, basicauth, ssl]
#     authMethod = none
#     # Use when 'schemaRegistry.authMethod' is 'basicauth' to specify the username for Authorization Basic header
#     basicAuthUser = null
#     # Use when 'schemaRegistry.authMethod' is 'basicauth' to specify the password for Authorization Basic header
#     basicAuthPassword = null
#     # Enable debug logging
#     debugLoggingEnabled = false

#     # Ssl Config: Use when 'authMethod' is 'ssl'
#     # The location of the key store file.
#     sslKeyStoreLocation = "/certs/registry.keystore.jks"
#     # The file format of the key store file.
#     sslKeyStoreType = "JKS"
#     # The password for the key store file.
#     sslKeyStorePassword = "password"
#     # The password of the private key in the key store file.
#     sslKeyPassword = "password"
#     # The location of the trust store file.
#     sslTrustStoreLocation = "/certs/registry.truststore.jks"
#     # The file format of the trust store file.
#     sslTrustStoreType = "JKS"
#     # The password for the trust store file.
#     sslTrustStorePassword = "password"
#     # Specifies whether to ignore the hostname verification.
#     sslIgnoreHostnameVerification = true
#   }

  # The default custom transformations to apply on any resources.
  transformations = []

  # The default custom validations to apply on any resources.
  validations = [
    {
      name = "topicMustHaveValidName"
      type = io.streamthoughts.jikkou.kafka.validation.TopicNameRegexValidation
      priority = 100
      config = {
        topicNameRegex = "[a-zA-Z0-9\\._\\-]+"
        topicNameRegex = ${?VALIDATION_DEFAULT_TOPIC_NAME_REGEX}
      }
    },
    {
      name = "topicMustHavePartitionsEqualsOrGreaterThanOne"
      type = io.streamthoughts.jikkou.kafka.validation.TopicMinNumPartitionsValidation
      priority = 100
      config = {
        topicMinNumPartitions = 1
        topicMinNumPartitions = ${?VALIDATION_DEFAULT_TOPIC_MIN_NUM_PARTITIONS}
      }
    },
    {
      name = "topicMustHaveReplicasEqualsOrGreaterThanOne"
      type = io.streamthoughts.jikkou.kafka.validation.TopicMinReplicationFactorValidation
      priority = 100
      config = {
        topicMinReplicationFactor = 1
        topicMinReplicationFactor = ${?VALIDATION_DEFAULT_TOPIC_MIN_REPLICATION_FACTOR}
      }
    }
  ]
  # The default custom reporters to report applied changes.
  reporters = [
    # Uncomment following lines to enable default kafka reporter
    #    {
    #     name = "default"
    #      type = io.streamthoughts.jikkou.kafka.reporter.KafkaChangeReporter
    #      config = {
    #        event.source = "jikkou/cli"
    #        kafka = {
    #          topic.creation.enabled = true
    #          topic.creation.defaultReplicationFactor = 1
    #          topic.name = "jikkou-resource-change-event"
    #          client = ${jikkou.kafka.client} {
    #            client.id = "jikkou-reporter-producer"
    #          }
    #        }
    #      }
    #    }
  ]

  jinja {
    enableRecursiveMacroCalls = false
  }
}