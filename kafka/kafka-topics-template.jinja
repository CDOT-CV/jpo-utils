{% macro create_topics(app_name) %}

{% for app in values.apps %}

{% if app.name == app_name %}

#------------------------------------------------------------------
# Stream Topics
#------------------------------------------------------------------
{% for topicName in app.streamTopics %}
---
apiVersion: "kafka.jikkou.io/v1beta2"
kind: KafkaTopic
metadata:
  name: "{{ topicName }}"
  labels: 
    app: "{{ app.name }}"
spec:
  partitions: {{ system.env.KAFKA_TOPIC_PARTITIONS | default(values.partitions) }}
  replicas: {{ system.env.KAFKA_TOPIC_REPLICAS | default(values.replicas) }}
  configs: 
    cleanup.policy: delete
    min.insync.replicas: {{ system.env.KAFKA_TOPIC_MIN_INSYNC_REPLICAS | default(values.minInsyncReplicas) }}
    retention.ms: {{ system.env.KAFKA_TOPIC_RETENTION_MS | default(values.retentionMs) }} 
{% endfor %}

#------------------------------------------------------------------
# Table Topics
#------------------------------------------------------------------
{% for topicName in app.tableTopics %}
---
apiVersion: "kafka.jikkou.io/v1beta2"
kind: KafkaTopic
metadata:
  name: "{{ topicName }}"
  labels: 
    app: "{{ app.name }}"
spec:
  partitions: 1
  replicas: 1
  configs:
    cleanup.policy: compact
    min.insync.replicas: {{ system.env.KAFKA_TOPIC_MIN_INSYNC_REPLICAS | default(values.minInsyncReplicas) }}
    delete.retention.ms: {{ system.env.KAFKA_TOPIC_DELETE_RETENTION_MS | default(values.deleteRetentionMs) }}
{% endfor %}
{% endif %}
{% endfor %}
{% endmacro %}


{% if system.env.JPO_ODE %}
{{ create_topics("jpo-ode") }}
{% endif %}

{% if system.env.JPO_GEOJSONCONVERTER %}
{{ create_topics("jpo-geojsonconverter") }}
{% endif %}

{% if system.env.JPO_CONFLICTMONITOR %}
{{ create_topics("jpo-conflictmonitor") }}
{% endif %}

{% if system.env.JPO_DEDUPLICATOR %}
{{ create_topics("jpo-deduplicator") }}
{% endif %}



